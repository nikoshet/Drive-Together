
			 <script>
					      var map, infoWindow;
					      function initMap() {
					        map = new google.maps.Map(document.getElementById('map'), {
					          center: {lat: 38.246639, lng:21.734573},
					          zoom: 6
					        });
					        infoWindow = new google.maps.InfoWindow;

					       
					        if (navigator.geolocation) {
					          navigator.geolocation.getCurrentPosition(function(position) {
					            var pos = {
					              lat: position.coords.latitude,
					              lng: position.coords.longitude
					            };

					            infoWindow.setPosition(pos);
					            infoWindow.setContent('Your location found');
					            infoWindow.open(map);
					            map.setCenter(pos);
					          }, function() {
					            handleLocationError(true, infoWindow, map.getCenter());
					          });
					        } else {
					          
					          handleLocationError(false, infoWindow, map.getCenter());
					        }

					        new AutocompleteDirectionsHandler(map);
					      }

					      function handleLocationError(browserHasGeolocation, infoWindow, pos) {
					        infoWindow.setPosition(pos);
					        infoWindow.setContent(browserHasGeolocation ?
					                              'Error: The Geolocation service failed.' :
					                              'Error: Your browser doesn\'t support geolocation.');
					        infoWindow.open(map);
					      }



					      function AutocompleteDirectionsHandler(map) {
						        this.map = map;
						        this.originPlaceId = null;
						        this.destinationPlaceId = null;
						        this.travelMode = 'DRIVING';
						        var originInput = document.getElementById('autocomplete1');
						        var destinationInput = document.getElementById('autocomplete2');
						       /* var modeSelector = document.getElementById('mode-selector');*/
						        this.directionsService = new google.maps.DirectionsService;
						        this.directionsDisplay = new google.maps.DirectionsRenderer;
						        this.directionsDisplay.setMap(map);

						        var originAutocomplete = new google.maps.places.Autocomplete(
						            originInput, {placeIdOnly: true});
						        var destinationAutocomplete = new google.maps.places.Autocomplete(
						            destinationInput, {placeIdOnly: true});

						        this.setupClickListener('changemode-walking', 'WALKING');
						        this.setupClickListener('changemode-transit', 'TRANSIT');
						        this.setupClickListener('changemode-driving', 'DRIVING');
						        
						        this.setupPlaceChangedListener(originAutocomplete, 'ORIG');
						        this.setupPlaceChangedListener(destinationAutocomplete, 'DEST');
/*
						        this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(originInput);
						        this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(destinationInput);*/
						     /*   this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(modeSelector);*/

						      }

						      // Sets a listener on a radio button to change the filter type on Places
						      // Autocomplete.
						    /*  AutocompleteDirectionsHandler.prototype.setupClickListener = function(id, mode) {
						        var radioButton = document.getElementById(id);
						        var me = this;
						        radioButton.addEventListener('click', function() {
						          me.travelMode = mode;
						          me.route();
						        });
						      };
*/
						      AutocompleteDirectionsHandler.prototype.setupPlaceChangedListener = function(autocomplete, mode) {
						        var me = this;
						        autocomplete.bindTo('bounds', this.map);
						        autocomplete.addListener('place_changed', function() {
						          var place = autocomplete.getPlace();
						          if (!place.place_id) {
						            window.alert("Please select an option from the dropdown list.");
						            return;
						          }
						          if (mode === 'ORIG') {
						            me.originPlaceId = place.place_id;
						          } else {
						            me.destinationPlaceId = place.place_id;
						          }
						          me.route();
						        });

						      };

						      AutocompleteDirectionsHandler.prototype.route = function() {
						        if (!this.originPlaceId || !this.destinationPlaceId) {
						          return;
						        }
						        var me = this;

						        this.directionsService.route({
						          origin: {'placeId': this.originPlaceId},
						          destination: {'placeId': this.destinationPlaceId},
						          travelMode: this.travelMode
						        }, function(response, status) {
						          if (status === 'OK') {
						            me.directionsDisplay.setDirections(response);
						          } else {
						            window.alert('Directions request failed due to ' + status);
						          }
						        });
						      };

				    </script>
				    <script async defer
				    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCv5oKmZbCg7Awo7fj-9Jtn1VYXZj_hWZ4&libraries=places&callback=initMap">
				    </script>
		
